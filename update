#!/usr/bin/env node
'use strict';

const fs = require('fs');

const {Dex} = require('./vendor/pokemon-showdown');
Dex.includeModData();

const SEED = [1, 2, 3, 4];
const N = +process.argv[2] || 100_000;
const SKIP = ['factory', 'unrated', 'cup', 'brawl', 'cap', 'monotype'];

for (const format in Dex.formats) {
  if (!Dex.getFormat(format).team) continue;
  if (SKIP.some(s => format.includes(s))) continue;

  const gen = Number(format.charAt(3));
  const letsgo = format.includes('letsgo');
  const generator = Dex.getTeamGenerator(format, SEED);
  const IVS = gen < 3 ? 30 : 31;
  const EVS = gen < 3 ? 255 : 85;

  const species = {};
  for (let i = 0; i < N; i++) {
    for (const set of generator.getTeam()) {
      const s = species[set.species] || (species[set.species] = {
        level: set.level,
        abilities: new Set(),
        items: new Set(),
        moves: new Set(),
        ivs: {},
        evs: {},
      });
      for (const stat in set.ivs) {
        if (set.ivs[stat] !== IVS) {
          if (!(stat in s.ivs)) {
            s.ivs[stat] = set.ivs[stat];
          } else if (s.ivs[stat] !== set.ivs[stat]) {
            s.ivs[stat] = -1;
          }
        } else  if (s.ivs[stat]) {
          s.ivs[stat] = -1;
        }
        if (set.evs[stat] !== EVS) {
          if (!(stat in s.evs)) {
            s.evs[stat] = set.evs[stat];
          } else if (s.evs[stat] !== set.evs[stat]) {
            s.evs[stat] = -1;
          }
        } else if (s.evs[stat]) {
          s.evs[stat] = -1;
        }
      }
      if (set.ability) s.abilities.add(set.ability);
      if (set.item) s.items.add(set.item)
      for (const move of set.moves) s.moves.add(move)
    }
  }

  const options = {};
  for (const [name, stats] of Object.entries(species).sort((a, b) => a[0].localeCompare(b[0]))) {
    const opts = {level: stats.level};
    if (gen >= 3 && !letsgo) opts.abilities = Array.from(stats.abilities).sort();
    if (stats.items.size) opts.items = Array.from(stats.items).sort();
    opts.moves = Array.from(stats.moves).map(m => Dex.getMove(m).name).sort();
    if (!letsgo) {
      for (const stat in stats.evs) {
        if (stats.evs[stat] !== -1) {
          opts.evs = opts.evs || {};
          opts.evs[stat] = stats.evs[stat];
        }
      }
    }
    for (const stat in stats.ivs) {
      if (stats.ivs[stat] !== -1) {
        opts.ivs = opts.ivs || {};
        opts.ivs[stat] = stats.ivs[stat];
      }
    }
    options[name] = opts;
  }

  fs.writeFileSync(`data/${format}.json`, JSON.stringify(options, null, 2));
}
