#!/usr/bin/env node
'use strict';

const fs = require('fs');
const util = require('util');
const stringify = require('json-stringify-pretty-compact');
const zlib = require('zlib');
const gzip = util.promisify(zlib.gzip);

const {Dex, Teams} = require('./vendor/pokemon-showdown');
Dex.includeModData();

const SEED = [1, 2, 3, 4];
const N = +process.argv[2] || 100_000;
const SKIP = ['factory', 'unrated', 'cup', 'staff', 'cap', 'monotype', 'blitz', 'generated'];
const ORDER = ['hp', 'atk', 'def', 'spa', 'spd', 'spe'];
const CMP = {
  stats: (a, b) => ORDER.indexOf(a[0]) - ORDER.indexOf(b[0]),
  str: (a, b) => a[0].localeCompare(b[0]),
  entries: (a, b) => b[1] - a[1] || a[0].localeCompare(b[0]),
};

// gen9randomdoublebattle currently uses the same sets as singles
const getSets = format => format.id.startsWith('gen9')
  ? require('./vendor/pokemon-showdown/data/random-sets.json')
  : undefined;

const getForme = (dex, pool, set) => {
  if (set.gigantamax) {
    return dex.species.get(set.species.startsWith('Pikachu')
      ? 'Pikachu-Gmax'
      : `${set.species}-Gmax`);
  }

  const item = dex.items.get(set.item);
  if (item.megaStone) return dex.species.get(item.megaStone);

  const formes = Object.keys(pool[set.species] || pool[set.name]);
  if (formes.length === 1) return dex.species.get(formes[0]);

  const matches = [];
  for (const f in pool[set.species]) {
    const forme = dex.species.get(f);
    if (forme.requiredItem) {
      if (set.item !== forme.requiredItem) continue;
      return forme;
    }
    if (forme.requiredAbility && set.ability !== forme.requiredAbility) continue;
    if (set.moves.every(m => pool[set.species][f].has(m))) {
      matches.push(forme);
    }
  }

  // Certain generators perform "Moveset modification" on specific PokÃ©mon or moveset combinations.
  // This can be problematic if the species in question has multiple formes, if so we just give up
  // and go with the set species (mostly relevant for Aggron/Aggron-Mega in Gen 6/7).
  return dex.species.get(matches.length ? matches[0] : set.species);
};

const getMoves = (species, doubles, sets) => {
  const moves = new Map();
  if (sets) {
    for (const set of (sets[species.id]?.sets || [])) {
      set.movepool.forEach(move =>  moves.set(Dex.toID(move), 0));
    }
  } if (doubles && species.randomDoubleBattleMoves) {
    species.randomDoubleBattleMoves.forEach(m => moves.set(m, 0));
  } else {
    if (species.essentialMove) moves.set(species.essentialMove, 0);
    if (species.exclusiveMoves) species.exclusiveMoves.forEach(m => moves.set(m, 0));
    if (species.comboMoves) species.comboMoves.forEach(m => moves.set(m, 0));
    if (species.randomBattleMoves) species.randomBattleMoves.forEach(m => moves.set(m, 0));
  }
  return moves;
};

const getRoles = (species, sets) => {
  if (!sets || !sets[species.id]?.sets) return undefined;
  const moves = {};
  const teraTypes = {};
  for (const set of sets[species.id].sets) {
    moves[set.role] = new Map();
    set.movepool.forEach(move => moves[set.role].set(Dex.toID(move), 0));
    teraTypes[set.role] = new Map();
    set.teraTypes.forEach(type => teraTypes[set.role].set(type, 0));
  }
  return {moves, teraTypes};
};

const round = v => Math.round(v * 1e4) / 1e4;

const serialize = async (data, file, factor = 1) => {
  const json = stringify(data, {maxLength: factor * 1000});
  await fs.promises.writeFile(`data/${file}`, json);
  const compressed = await gzip(json);
  return [json.length, compressed.length];
};

(async () => {
  fs.rmSync('data', {recursive: true, force: true});
  fs.mkdirSync('data/js', {recursive: true});
  fs.mkdirSync('data/stats');

  const index = {options: {}, stats: {}};
  for (const format of Dex.formats.all()) {
    if (!format.team || !['singles', 'doubles'].includes(format.gameType)) continue;
    if (SKIP.some(s => format.id.includes(s)) || !format.mod.startsWith('gen')) continue;
    const start = process.hrtime.bigint();

    // Of course, PS is braindead and Format#gen always reports 0
    const gen = Number(format.id.charAt(3));
    const dex = Dex.forFormat(format);
    const letsgo = format.id.includes('letsgo');
    const doubles = format.gameType === 'doubles';
    const generator = Teams.getGenerator(format, SEED);
    const IVS = gen < 3 ? 30 : 31;
    const EVS = gen < 3 ? 255 : 85;
    const sets = getSets(format);

    const pool = {};
    for (const species of dex.species.all()) {
      if  (species.gen > gen) continue;
      if (letsgo && (species.num < 1 || species.num > 151 && ![808, 809].includes(species.num))) {
        continue;
      }
      const moves = getMoves(species, doubles, sets);
      if (!moves.size) continue;
      const base = typeof species.battleOnly === 'string' ? species.battleOnly : species.name;
      pool[base] = (pool[base] || {});
      pool[base][species.name] = moves;
    }

    const formes = {};
    for (let i = 0; i < N; i++) {
      for (const set of generator.getTeam()) {
        const forme = getForme(dex, pool, set);
        const roles = getRoles(forme, sets);
        const s = formes[forme.name] || (formes[forme.name] = {
          n: 0,
          level: set.species === 'Zoroark' ? 0 : set.level,
          abilities: new Map(),
          items: new Map(),
          moves: roles ? roles.moves : getMoves(forme, doubles),
          teraTypes: roles?.teraTypes,
          roles: new Map(),
          ivs: {},
          evs: {},
        });
        s.n++;
        const moves = set.role ? s.moves[set.role] : s.moves;
        for (const m of set.moves) moves.set(m, (moves.get(m) || 0) + 1);
        for (const stat in set.ivs) {
          if (set.ivs[stat] !== IVS) {
            if (!(stat in s.ivs)) {
              s.ivs[stat] = set.ivs[stat];
            } else if (s.ivs[stat] !== set.ivs[stat]) {
              s.ivs[stat] = -1;
            }
          } else if (stat in s.ivs) {
            s.ivs[stat] = -1;
          }
          if (set.evs[stat] !== EVS) {
            if (!(stat in s.evs)) {
              s.evs[stat] = set.evs[stat];
            } else if (s.evs[stat] !== set.evs[stat]) {
              s.evs[stat] = -1;
            }
          } else if (stat in s.evs) {
            s.evs[stat] = -1;
          }
        }
        if (set.ability) s.abilities.set(set.ability, (s.abilities.get(set.ability) || 0) + 1);
        if (set.item) s.items.set(set.item, (s.items.get(set.item) || 0) + 1);
        if (set.teraType) {
          s.teraTypes[set.role].set(set.teraType,
            (s.teraTypes[set.role].get(set.teraType) || 0) + 1);
        }
        if (set.role) s.roles.set(set.role, (s.roles.get(set.role) || 0) + 1);
      }
    }

    const options = {};
    const stats = {};
    for (const [name, data] of Object.entries(formes).sort(CMP.str)) {
      const o = {level: data.level};
      const s = {level: data.level};
      if (gen >= 3 && !letsgo) {
        o.abilities = Array.from(data.abilities.keys()).sort();
        s.abilities = Object.fromEntries(Array.from(data.abilities.entries())
          .map(e => [e[0], round(e[1] / data.n)]).sort(CMP.entries));
      }
      if (data.items.size) {
        o.items = Array.from(data.items.keys()).sort();
        s.items = Object.fromEntries(Array.from(data.items.entries())
          .map(e => [e[0], round(e[1] / data.n)]).sort(CMP.entries));
      }
      if (sets) {
        o.roles = {};
        s.roles = {};
        for (const [role, n] of Array.from(data.roles.entries()).sort((a, b) => b[1] - a[1])) {
          o.roles[role] = {
            teraTypes: Array.from(data.teraTypes[role].keys()).sort(),
            moves: Array.from(data.moves[role].keys()).map(m => dex.moves.get(m).name).sort(),
          };
          s.roles[role] = {
            weight: round(n / data.n),
            teraTypes: Object.fromEntries(Array.from(data.teraTypes[role].entries())
              .map(e => [e[0], round(e[1] / n)]).sort(CMP.entries)),
            moves: Object.fromEntries(Array.from(data.moves[role].entries())
              .map(e => [dex.moves.get(e[0]).name, round(e[1] / n)]).sort(CMP.entries)),
          };
        }
      } else {
        o.moves = Array.from(data.moves.keys()).map(m => dex.moves.get(m).name).sort();
        s.moves = Object.fromEntries(Array.from(data.moves.entries())
          .map(e => [dex.moves.get(e[0]).name, round(e[1] / data.n)]).sort(CMP.entries));
      }

      if (!letsgo) {
        for (const [stat, val] of Object.entries(data.evs).sort((CMP.stats))) {
          if (val !== -1) {
            o.evs = o.evs || {};
            o.evs[stat] = val;
          }
        }
        s.evs = o.evs;
      }
      for (const [stat, val] of Object.entries(data.ivs).sort((CMP.stats))) {
        if (val !== -1) {
          o.ivs = o.ivs || {};
          o.ivs[stat] = val;
        }
        s.evs = o.ivs;
      }
      options[name] = o;
      stats[name] = s;
    }

    index.options[`${format.id}.json`] = await serialize(options, `${format.id}.json`);
    index.stats[`${format.id}.json`] = await serialize(stats, `stats/${format.id}.json`, 10);
    const code = util.inspect(options, {
      depth: Infinity,
      maxArrayLength: Infinity,
      compact: true,
      breakLength: 1000,
    }).slice(1, -1);
    fs.writeFileSync(`data/js/${format.id}.js`, `var ${format.id.toUpperCase()} = {\n ${code}\n};`);
    console.log(`${format.name}: ${(Number(process.hrtime.bigint() - start) / 1e9).toFixed(3)}s`);
  }
  fs.writeFileSync('data/index.json', stringify(index.options));
  fs.writeFileSync('data/stats/index.json', stringify(index.stats));
})().catch(err => {
  console.error(err);
  process.exit(1);
});

